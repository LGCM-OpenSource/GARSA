info_snp <- snp_match(sumstats, map,join_by_pos = FALSE)
# Assign the genotype to a variable for easier downstream analysis
genotype <- obj.bigSNP$genotypes
#imputation in genotype file, because it can't contains NA values
#genotype_2 <- snp_fastImputeSimple(genotype, ncores = NCORES)
# Rename the data structures
CHR <- map$chr
POS <- map$pos
# get the CM information from 1000 Genome
# will download the 1000G file to the current directory (".")
POS2 <- snp_asGeneticPos(CHR, POS, dir = out_dir)
#limpar um pouco da memória
gc()
# calculate LD
for (chr in 1:22) {
# Extract SNPs that are included in the chromosome
ind.chr <- which(info_snp$chr == chr)
ind.chr2 <- info_snp$`_NUM_ID_`[ind.chr]
# Calculate the LD
corr0 <- snp_cor(
genotype,
ind.col = ind.chr2,
ncores = NCORES,
infos.pos = POS2[ind.chr2],
size = 3 / 1000
)
if (chr == 1) {
ld <- Matrix::colSums(corr0^2)
corr <- as_SFBM(corr0, tmp)
} else {
ld <- c(ld, Matrix::colSums(corr0^2))
corr$add_columns(corr0, nrow(corr))
}
}
warnings()
chr=1
# Extract SNPs that are included in the chromosome
ind.chr <- which(info_snp$chr == chr)
ind.chr
ind.chr2 <- info_snp$`_NUM_ID_`[ind.chr]
ind.chr2
# Calculate the LD
corr0 <- snp_cor(
genotype,
ind.col = ind.chr2,
ncores = NCORES,
infos.pos = POS2[ind.chr2],
size = 3 / 1000
)
corr0
ind.chr2
is.na(ind.chr2)
table(is.na(ind.chr2))
table(is.na(ind.chr))
ld <- Matrix::colSums(corr0^2)
corr <- as_SFBM(corr0, tmp)
ld <- Matrix::colSums(corr0^2)
corr <- as_SFBM(corr0, tmp)
ld
Matrix::colSums(corr0^2)
corr0
genotype
str(genotype)
obj.bigSNP$genotypes
obj.bigSNP
obj.bigSNP$genotypes
str(obj.bigSNP$genotypes)
str(obj.bigSNP$genotypes$code256)
ind.chr2
corr0
ind.chr2
genotype
genotype$code256
obj.bigSNP$map[-3]
#imputation in genotype file, because it can't contains NA values
genotype_2 <- snp_fastImputeSimple(genotype, ncores = NCORES)
genotype_2
genotype_2$code256
obj.bigSNP$map[-3]
obj.bigSNP$map
obj.bigSNP$genotypes
snp_attach(bfile_rds)
obj.bigSNP$genotypes
obj.bigSNP$genotypes$code256
View(obj.bigSNP)
View(info_snp)
table(is.na(info_snp))
library(tidyverse)
info_snp <- drop_na(info_snp)
info_snp
# Assign the genotype to a variable for easier downstream analysis
genotype <- obj.bigSNP$genotypes
genotype
genotype$code256
info_snp
sumstats <- sumstats[sumstats$rsid%in% info$rsid,]
print(paste0(length(sumstats$rsid), " SNPs will be used for the LDPRED analysis"))
# perform SNP matching
info_snp <- snp_match(sumstats, map,join_by_pos = FALSE)
obj.bigSNP$genotypes
obj.bigSNP
str(obj.bigSNP$genotypes)
# We assume the fam order is the same across different chromosomes
fam.order <- as.data.table(obj.bigSNP$fam)
# Rename fam order
setnames(fam.order,
c("family.ID", "sample.ID"),
c("FID", "IID"))
ldsc <- snp_ldsc( ld,
length(ld),
chi2 = (df_beta$beta / df_beta$beta_se)^2,
sample_size = df_beta$n_eff,
blocks = NULL)
df_beta <- info_snp[,c("beta", "beta_se", "n_eff", "_NUM_ID_")]
ldsc <- snp_ldsc( ld,
length(ld),
chi2 = (df_beta$beta / df_beta$beta_se)^2,
sample_size = df_beta$n_eff,
blocks = NULL)
# ldsc <- snp_ldsc( ld,
#                   length(ld),
#                   chi2 = (df_beta$beta / df_beta$beta_se)^2,
#                   sample_size = df_beta$n_eff,
#                   blocks = NULL)
ldsc <- snp_ldsc2(corr, df_beta)
ldsc <- snp_ldsc( ld,
length(ld),
chi2 = (df_beta$beta / df_beta$beta_se)^2,
sample_size = df_beta$n_eff,
blocks = NULL)
View(fam.order)
View(covariate)
View(pcs)
View(pheno)
View(phenotype)
View(sumstats)
table(is.na(df_beta))
table(is.na(df_beta$beta))
View(df_beta)
library(dplyr)
df_beta <- drop_na(df_beta)
ldsc <- snp_ldsc( ld,
length(ld),
chi2 = (df_beta$beta / df_beta$beta_se)^2,
sample_size = df_beta$n_eff,
blocks = NULL)
df_beta <- info_snp[,c("beta", "beta_se", "n_eff", "_NUM_ID_")]
df_beta[is.na(df_beta)] <- 0
ldsc <- snp_ldsc( ld,
length(ld),
chi2 = (df_beta$beta / df_beta$beta_se)^2,
sample_size = df_beta$n_eff,
blocks = NULL)
df_beta <- info_snp[,c("beta", "beta_se", "n_eff", "_NUM_ID_")]
# df_beta[is.na(df_beta)] <- 0
ldsc <- snp_ldsc( ld,
length(ld),
chi2 = (df_beta$beta / df_beta$beta_se)^2,
sample_size = df_beta$n_eff,
blocks = NULL)
gc()
library(bigsnpr)
options(bigstatsr.check.parallel.blas = FALSE)
options(default.nproc.blas = NULL)
library(data.table)
library(magrittr)
library(ggplot2)
library(optparse)
library(dplyr)
##Read in the phenotype, covariate and pcs files
bfile = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/tmp/GARSA_final_example_for_LDPRED.bed"
mlma = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/tmp/GARSA_final_example_GCTA_qcovar_covar_GWAS.adjusted.mlma"
pheno_file = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/GARSA_example_phenotype.tsv"
covar = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/GARSA_example_covar.tsv"
qcovar = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/GARSA_final_example_PCA_total.txt"
database = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/Final/modules/database/LDPRED2/map_hm3_ldpred2.rds"
out_dir = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/"
n_pcs = 4
threads = 4
phenotype <- read.table(pheno_file, header=TRUE,
)
colnames(phenotype) = c("FID", "IID", "Pheno")
covariate <- read.table(covar,
header = TRUE)
pcs <- read.table(qcovar,
header = TRUE)
pheno <- merge(phenotype, covariate) %>%
merge(., pcs)
info <- readRDS(database)
View(info)
sumstats <- bigreadr::fread2(mlma)
View(sumstats)
sumstats <- sumstats[sumstats$rsid%in% info$rsid,]
NCORES <- threads
# Open a temporary file
tmp <- tempfile(tmpdir = out_dir)
out_dir = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe"
# Open a temporary file
tmp <- tempfile(tmpdir = out_dir)
on.exit(file.remove(paste0(tmp, ".sbk")), add = TRUE)
# Initialize variables for storing the LD score and LD matrix
corr <- NULL
ld <- NULL
# We want to know the ordering of samples in the bed file
fam.order <- NULL
# preprocess the bed file (only need to do once for each data set)
snp_readBed(bfile)
# now attach the genotype object
obj.bigSNP <- snp_attach(bfile_rds)
# now attach the genotype object
obj.bigSNP <- snp_attach(bfile_rds)
# preprocess the bed file (only need to do once for each data set)
snp_readBed(bfile)
# now attach the genotype object
obj.bigSNP <- snp_attach(bfile_rds)
bfile_rds =gsub(".bed", ".rds", bfile)
# now attach the genotype object
obj.bigSNP <- snp_attach(bfile_rds)
map <- obj.bigSNP$map[-3]
names(map) <- c("chr", "rsid", "pos", "a1", "a0")
# perform SNP matching
info_snp <- snp_match(sumstats, map,join_by_pos = FALSE)
View(info_snp)
# info_snp <- drop_na(info_snp)
# Assign the genotype to a variable for easier downstream analysis
genotype <- obj.bigSNP$genotypes
table(is.na(info))
table(is.na(pheno))
table(is.na(info))
View(info)
info <- drop_na(info)
sumstats <- bigreadr::fread2(mlma)
sumstats <- sumstats[sumstats$rsid%in% info$rsid,]
NCORES <- threads
# Open a temporary file
tmp <- tempfile(tmpdir = out_dir)
on.exit(file.remove(paste0(tmp, ".sbk")), add = TRUE)
corr <- NULL
ld <- NULL
# We want to know the ordering of samples in the bed file
fam.order <- NULL
# preprocess the bed file (only need to do once for each data set)
snp_readBed(bfile)
# preprocess the bed file (only need to do once for each data set)
snp_readBed(bfile)
# now attach the genotype object
obj.bigSNP <- snp_attach(bfile_rds)
map <- obj.bigSNP$map[-3]
names(map) <- c("chr", "rsid", "pos", "a1", "a0")
# perform SNP matching
info_snp <- snp_match(sumstats, map,join_by_pos = FALSE)
# Rename the data structures
CHR <- map$chr
POS <- map$pos
# get the CM information from 1000 Genome
# will download the 1000G file to the current directory (".")
POS2 <- snp_asGeneticPos(CHR, POS, dir = out_dir)
#limpar um pouco da memória
gc()
# calculate LD
for (chr in 1:22) {
# Extract SNPs that are included in the chromosome
ind.chr <- which(info_snp$chr == chr)
ind.chr2 <- info_snp$`_NUM_ID_`[ind.chr]
# Calculate the LD
corr0 <- snp_cor(
genotype,
ind.col = ind.chr2,
ncores = NCORES,
infos.pos = POS2[ind.chr2],
size = 3 / 1000
)
if (chr == 1) {
ld <- Matrix::colSums(corr0^2)
corr <- as_SFBM(corr0, tmp)
} else {
ld <- c(ld, Matrix::colSums(corr0^2))
corr$add_columns(corr0, nrow(corr))
}
}
# We assume the fam order is the same across different chromosomes
fam.order <- as.data.table(obj.bigSNP$fam)
# Rename fam order
setnames(fam.order,
c("family.ID", "sample.ID"),
c("FID", "IID"))
df_beta <- info_snp[,c("beta", "beta_se", "n_eff", "_NUM_ID_")]
# df_beta[is.na(df_beta)] <- 0
ldsc <- snp_ldsc( ld,
length(ld),
chi2 = (df_beta$beta / df_beta$beta_se)^2,
sample_size = df_beta$n_eff,
blocks = NULL)
table(is.na(info_sno))
table(is.na(info_snp))
table(is.na(df_beta$beta))
sumstats <- bigreadr::fread2(mlma)
table(is.na(sumstats))
View(sumstats)
gc()
library(bigsnpr)
options(bigstatsr.check.parallel.blas = FALSE)
options(default.nproc.blas = NULL)
library(data.table)
library(magrittr)
library(ggplot2)
library(optparse)
library(dplyr)
##Read in the phenotype, covariate and pcs files
bfile = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/tmp/GARSA_final_example_for_LDPRED.bed"
mlma = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/tmp/GARSA_final_example_GCTA_qcovar_covar_GWAS.adjusted.mlma"
pheno_file = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/GARSA_example_phenotype.tsv"
covar = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/GARSA_example_covar.tsv"
qcovar = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe/GARSA_final_example_PCA_total.txt"
database = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/Final/modules/database/LDPRED2/map_hm3_ldpred2.rds"
out_dir = "/home/fernando/lgcm/projects/Pipeline_FOXCONN/dev/scripts/testes_pipe"
n_pcs = 4
threads = 4
#Phenotype --> mesma tabela de fenotipos do GWAS
phenotype <- read.table(pheno_file, header=TRUE,
)
colnames(phenotype) = c("FID", "IID", "Pheno")
#Tabela de covars do GWAS
covariate <- read.table(covar,
header = TRUE)
#Tabela de qcovars do GWAS -- Aqui como temos apenas 4 PCs, pegamos as colunas de FID e IID + PC1 .. PC4
pcs <- read.table(qcovar,
header = TRUE)
##Gerando a tabela necessária para seguir em frente
pheno <- merge(phenotype, covariate) %>%
merge(., pcs)
##HapMapSNPs
info <- readRDS(database)
info <- drop_na(info)
#Load Summary file do GWAS
sumstats <- bigreadr::fread2(mlma)
sumstats <- drop_na(sumstats)
# Filter out hapmap SNPs
print("Filtering SNPs using Reference -- database")
sumstats <- sumstats[sumstats$rsid%in% info$rsid,]
print(paste0(length(sumstats$rsid), " SNPs will be used for the LDPRED analysis"))
## Calculate the LD matrix ##
NCORES <- threads
# Open a temporary file
tmp <- tempfile(tmpdir = out_dir)
on.exit(file.remove(paste0(tmp, ".sbk")), add = TRUE)
# Initialize variables for storing the LD score and LD matrix
corr <- NULL
ld <- NULL
# We want to know the ordering of samples in the bed file
fam.order <- NULL
# preprocess the bed file (only need to do once for each data set)
snp_readBed(bfile)
bfile_rds =gsub(".bed", ".rds", bfile)
# now attach the genotype object
obj.bigSNP <- snp_attach(bfile_rds)
# extract the SNP information from the genotype
map <- obj.bigSNP$map[-3]
names(map) <- c("chr", "rsid", "pos", "a1", "a0")
# perform SNP matching
info_snp <- snp_match(sumstats, map,join_by_pos = FALSE)
# info_snp <- drop_na(info_snp)
# Assign the genotype to a variable for easier downstream analysis
genotype <- obj.bigSNP$genotypes
# Rename the data structures
CHR <- map$chr
POS <- map$pos
# get the CM information from 1000 Genome
# will download the 1000G file to the current directory (".")
POS2 <- snp_asGeneticPos(CHR, POS, dir = out_dir)
#limpar um pouco da memória
gc()
# calculate LD
for (chr in 1:22) {
# Extract SNPs that are included in the chromosome
ind.chr <- which(info_snp$chr == chr)
ind.chr2 <- info_snp$`_NUM_ID_`[ind.chr]
# Calculate the LD
corr0 <- snp_cor(
genotype,
ind.col = ind.chr2,
ncores = NCORES,
infos.pos = POS2[ind.chr2],
size = 3 / 1000
)
if (chr == 1) {
ld <- Matrix::colSums(corr0^2)
corr <- as_SFBM(corr0, tmp)
} else {
ld <- c(ld, Matrix::colSums(corr0^2))
corr$add_columns(corr0, nrow(corr))
}
}
# We assume the fam order is the same across different chromosomes
fam.order <- as.data.table(obj.bigSNP$fam)
# Rename fam order
setnames(fam.order,
c("family.ID", "sample.ID"),
c("FID", "IID"))
df_beta <- info_snp[,c("beta", "beta_se", "n_eff", "_NUM_ID_")]
# df_beta[is.na(df_beta)] <- 0
ldsc <- snp_ldsc( ld,
length(ld),
chi2 = (df_beta$beta / df_beta$beta_se)^2,
sample_size = df_beta$n_eff,
blocks = NULL)
option_list = list(make_option(c("--bfile"), type="character", default=NULL,
help="bfile for processing", metavar="character"),
make_option(c("--mlma"), type="character", default=NULL, help="GWAS output file -- .mlma",
metavar="character"),
make_option(c("--pheno"), type="character", default=NULL, help="GWAS Phenotype input file",
metavar="character"),
make_option(c("--covar"), type="character", default=NULL, help="GWAS Covars input file",
metavar="character"),
make_option(c("--qcovar"), type="character", default=NULL, help="GWAS qCovars input file",
metavar="character"),
make_option(c("--database"), type="character", default=NULL,
help="SNPs_database in RDS format", metavar="character"),
make_option(c("--outdir"), type="character", default=NULL,
help="Output directory", metavar="character"),
make_option(c("--PCs"), type="integer", default=NULL,
help="Number of PCs to use", metavar="integer"),
make_option(c("--threads"), type="integer", default=NULL,
help="Number of threads to use", metavar="integer")),
opt_parser = OptionParser(option_list=option_list)
library(glue)
#t=glue("{pheno_col}~PRS")
pheno="X"
t=glue("{pheno_col}~PRS")
t=glue("{pheno}~PRS")
t
paste0("Pheno~PRS",sex_column, "+", .)
sex_column <- "TESTE"
paste0("Pheno~PRS",sex_column, "+", .)
sex_column <- data.frame( col1 = "TESTE")
paste0("Pheno~PRS",sex_column, "+", .)
teste <- readRDS("/home/fernando/Documentos/UKBB_intersect.rds")
View(teste)
library(caret)
library(dplyr)
library(tidyverse)
help(caret)
help(createDataPartition)
#UKBB caret
library(caret)
library(dplyr)
library(tidyverse)
#dados para divisão de validação e teste
pheno_data <- read.table("/home/fernando/lgcm/projects/Workflow_UKBB/data/intermediate/phenotype/Pheno_UKBB_for_caret.tsv",
header = TRUE)
#qcovar_data <- read.table("/home/fernando/lgcm/projects/Pipeline_FOXCONN/data/intermediate/testes_LDPRED2_Pelotas/Pelotas_merged_qcovars.txt",
#header = TRUE)
#covar_data <- read.table("/home/fernando/lgcm/projects/Pipeline_FOXCONN/data/intermediate/testes_LDPRED2_Pelotas/Pelotas_merged_covars.txt",
#header = TRUE)
PCs <- read.table("/home/fernando/lgcm/projects/Workflow_UKBB/data/intermediate/phenotype/PCA_total.tsv",
header = TRUE)
#Os dados de pressão estão sendo interpretados como string -- corrigir
pheno_data$mean_auto_sbp_med <- pheno_data$mean_auto_sbp_med %>% as.double()
#Columns to merge
merge_cols <- c("FID", "IID")
complete_dataset <- inner_join(pheno_data, PCs, by=merge_cols)
#Determinar se tem ou não hipertensão
#Stage 1: 130 to 139 mmHg -- Tem (1)
#Sem hipert: < 130 mmHg -- Não Tem (0)
#Stage 2: > 140 mmHg -- Tem stage 2 (2)
complete_dataset <- complete_dataset %>%
mutate(PAS_quartile =
case_when(mean_auto_sbp_med < 130.0 ~ 0, between(mean_auto_sbp_med,130.0, 139.0) ~ 1, mean_auto_sbp_med > 140.0 ~ 2))
## https://www.cdc.gov/nchs/products/databriefs/db289.htm#:~:text=The%20prevalence%20of%20hypertension%20increased,among%20both%20men%20and%20women.
## age group < 18 ;18–39; 40–59; and > 60
complete_dataset <- complete_dataset %>%
mutate(Age_division =
case_when(age < 18 ~ 0, between(age,18, 39) ~ 1, between(age, 40, 60) ~ 2, age > 60 ~ 3))
## BMI --> https://www.who.int/europe/news-room/fact-sheets/item/a-healthy-lifestyle---who-recommendations#:~:text=BMI%20is%20derived%20from%20a,24.9%20as%20a%20normal%20BMI.
##WHO 2020
complete_dataset <- complete_dataset %>%
mutate(BMI_class =
case_when(bmi < 18.5 ~ 0, between(bmi, 18.5,24.9) ~ 1, between(bmi,25.0,29.9) ~ 2, bmi > 30 ~ 3))
#random seed para ser reprodutivel
set.seed(42)
#selecionando colunas de dados para usar
data_to_use <- paste(complete_dataset$PAS_quartile,complete_dataset$psex,complete_dataset$Age_division, complete_dataset$BMI_class)
GWASIndex <- createDataPartition(data_to_use, p = 0.66, list = FALSE, times = 1)
GWAS_data <- complete_dataset[GWASIndex,]
PRS_data <- complete_dataset[-GWASIndex,]
#Escrever input para filtro no Plink
GWAS_IDs <- GWAS_data[c("FID", "IID")]
gwas_prop1 <- prop.table(table(GWAS_data$PAS_quartile))
gwas_prop2 <- prop.table(table(GWAS_data$psex))
str(gwas_prop1)
gwas_prop1 <- prop.table(table(GWAS_data$PAS_quartile))
prs_prop1 <- prop.table(table(PRS_data$PAS_quartile))
GWAS_data <- complete_dataset[GWASIndex,]
View(GWAS_data)
GWAS_data <- complete_dataset[GWASIndex,]
PRS_data <- complete_dataset[-GWASIndex,]
GWAS_IDs <- GWAS_data[c("FID", "IID")]
PRS_IDs <- PRS_data[c("FID", "IID")]
write.table(PRS_IDs, file = "/home/fernando/lgcm/projects/Workflow_UKBB/data/intermediate/phenotype/UKBB_PRS_IDS.tsv", sep="\t",
row.names = FALSE)
div_prs <- paste(PRS_data$PAS_quartile,PRS_data$psex,PRS_data$Age_division, PRS_data$BMI_class)
PRS_test_Index <- createDataPartition(div_prs, p = 0.5, list = FALSE, times = 1)
PRS_teste <- complete_dataset[PRS_test_Index,]
PRS_valid <- complete_dataset[-PRS_test_Index,]
PRS_teste <- PRS_data[PRS_test_Index,]
PRS_valid <- PRS_data[-PRS_test_Index,]
teste_IDs <- PRS_teste[c("FID", "IID")]
valid_IDs <- PRS_valid[c("FID", "IID")]
write.table(teste_IDs, file = "/home/fernando/lgcm/projects/Workflow_UKBB/data/intermediate/phenotype/UKBB_PRS_Teste_IDS.tsv", sep="\t",
row.names = FALSE)
write.table(valid_IDs, file = "/home/fernando/lgcm/projects/Workflow_UKBB/data/intermediate/phenotype/UKBB_PRS_Valid_IDS.tsv", sep="\t",
row.names = FALSE)
